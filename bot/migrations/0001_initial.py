# Generated by Django 5.0.7 on 2024-07-22 19:38

import autoslug.fields
import django.db.models.deletion
import multiselectfield.db.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="LadderSettings",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("current_season", models.PositiveSmallIntegerField(default=1)),
                ("mmr_per_game", models.PositiveSmallIntegerField(default=50)),
                ("votekick_treshold", models.PositiveSmallIntegerField(default=7)),
                ("dota_lobby_name", models.CharField(default="RD2L", max_length=200)),
                ("noob_queue_suffix", models.CharField(blank=True, default="LUL", max_length=10)),
                (
                    "queue_mmr_filter",
                    models.PositiveSmallIntegerField(choices=[(0, "Dota MMR"), (1, "Ladder MMR")], default=1),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Match",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "winner",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (None, "Match not yet settled"),
                            (1, "Banned from playing only"),
                            (2, "Banned from playing and lobby"),
                        ],
                        null=True,
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("season", models.PositiveSmallIntegerField(default=1)),
                ("dota_id", models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=200, unique=True)),
                ("dota_mmr", models.PositiveIntegerField()),
                ("dota_id", models.CharField(blank=True, max_length=200, null=True)),
                ("discord_id", models.CharField(blank=True, max_length=200, null=True)),
                ("slug", autoslug.fields.AutoSlugField(editable=False, populate_from="name")),
                ("ladder_mmr", models.PositiveIntegerField(default=0)),
                ("score", models.PositiveIntegerField(default=0)),
                ("rank_ladder_mmr", models.PositiveIntegerField(default=0)),
                ("rank_score", models.PositiveIntegerField(default=0)),
                ("voice_issues", models.BooleanField(default=False)),
                ("bot_access", models.BooleanField(default=False)),
                ("min_allowed_mmr", models.BigIntegerField(default=0)),
                ("max_allowed_mmr", models.BigIntegerField(default=0)),
                ("new_reg_pings", models.BooleanField(default=False)),
                ("queue_afk_ping", models.BooleanField(default=True)),
                ("description", models.CharField(blank=True, max_length=200, null=True)),
                ("vouch_info", models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                "ordering": ["rank_ladder_mmr"],
            },
        ),
        migrations.CreateModel(
            name="QueueChannel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=200)),
                ("min_mmr", models.PositiveSmallIntegerField(default=0)),
                ("max_mmr", models.PositiveSmallIntegerField(default=0)),
                ("discord_id", models.BigIntegerField()),
                ("discord_msg", models.BigIntegerField(blank=True, null=True)),
                ("record_matches", models.BooleanField(default=True)),
                ("active", models.BooleanField(default=True)),
                (
                    "active_on",
                    multiselectfield.db.fields.MultiSelectField(
                        blank=True,
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ],
                        default=range(0, 7),
                        max_length=13,
                        null=True,
                    ),
                ),
                (
                    "game_mode",
                    models.CharField(
                        choices=[
                            ("AP", "All Pick"),
                            ("AR", "All Random"),
                            ("RD", "Random Draft"),
                            ("SD", "Single Draft"),
                            ("CD", "Captains Draft"),
                            ("CM", "Captains Mode"),
                            ("RCM", "Reverse Captains Mode"),
                            ("ARDM", "All Random Death Match"),
                            ("AD", "Ability Draft"),
                        ],
                        default="CM",
                        max_length=200,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RolesPreference",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "carry",
                    models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=3),
                ),
                ("mid", models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=3)),
                (
                    "offlane",
                    models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=3),
                ),
                ("pos4", models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=3)),
                ("pos5", models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=3)),
            ],
        ),
        migrations.CreateModel(
            name="MatchPlayer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("team", models.PositiveSmallIntegerField()),
                ("match", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="bot.match")),
                ("player", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="bot.player")),
            ],
            options={
                "ordering": ("-match__date", "team"),
                "unique_together": {("player", "match")},
            },
        ),
        migrations.AddField(
            model_name="match",
            name="players",
            field=models.ManyToManyField(through="bot.MatchPlayer", to="bot.player"),
        ),
        migrations.CreateModel(
            name="LadderQueue",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("active", models.BooleanField(default=True)),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("min_mmr", models.PositiveSmallIntegerField(default=0)),
                ("max_mmr", models.PositiveSmallIntegerField(default=0)),
                ("game_start_time", models.DateTimeField(blank=True, null=True)),
                ("game_end_time", models.DateTimeField(blank=True, null=True)),
                ("game_server", models.BigIntegerField(blank=True, null=True)),
                ("channel", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="bot.queuechannel")),
            ],
            options={
                "ordering": ("-id",),
            },
        ),
        migrations.CreateModel(
            name="QueuePlayer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("joined_date", models.DateTimeField(auto_now_add=True)),
                ("player", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="bot.player")),
                ("queue", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="bot.ladderqueue")),
            ],
            options={
                "unique_together": {("player", "queue")},
            },
        ),
        migrations.AddField(
            model_name="ladderqueue",
            name="players",
            field=models.ManyToManyField(through="bot.QueuePlayer", to="bot.player"),
        ),
        migrations.CreateModel(
            name="ScoreChange",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("score_change", models.SmallIntegerField(default=0)),
                ("mmr_change", models.SmallIntegerField(default=0)),
                ("info", models.CharField(max_length=255)),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("season", models.PositiveSmallIntegerField(default=1)),
                (
                    "match",
                    models.OneToOneField(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="bot.matchplayer"
                    ),
                ),
                ("player", models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="bot.player")),
            ],
            options={
                "ordering": ("-id",),
                "unique_together": {("player", "match")},
            },
        ),
    ]
